import asyncio
import random
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from utils.check_sub import check_subscription
from utils.db_manager import get_user, update_user, load_db, get_required_channel
from config import ADMIN_ID
from aiogram.types import CallbackQuery,  LabeledPrice, PreCheckoutQuery, SuccessfulPayment
from config import ADMIN_ID, ADMIN_2ID

ADMINS = [int(ADMIN_ID), int(ADMIN_2ID)]
router = Router()

# –ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
scheduled_notifications = {}

# üîß –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (True ‚Äî —Ç–µ—Å—Ç, False ‚Äî —Ä–∞–±–æ—á–∏–π)
TEST_MODE = False
TEST_WAIT_SECONDS = 15  # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫

# =============================== #
#   –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ–π—Å–æ–º    #
# =============================== #

def can_open_today(user):
    last_open = user.get("last_open")
    if not last_open:
        return True
    try:
        last_date = datetime.strptime(last_open, "%Y-%m-%d %H:%M:%S")
    except ValueError:
        last_date = datetime.strptime(last_open, "%Y-%m-%d")
    return datetime.now() >= last_date + timedelta(hours=24)


def time_until_next(user):
    last_open = user.get("last_open")
    if not last_open:
        return (0, 0)
    try:
        next_open = datetime.strptime(last_open, "%Y-%m-%d %H:%M:%S") + timedelta(hours=24)
    except ValueError:
        next_open = datetime.strptime(last_open, "%Y-%m-%d") + timedelta(hours=24)
    delta = next_open - datetime.now()
    if delta.total_seconds() <= 0:
        return (0, 0)
    hours = delta.seconds // 3600
    minutes = (delta.seconds % 3600) // 60
    return hours, minutes


async def schedule_notification(bot, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –∏–ª–∏ TEST_WAIT_SECONDS"""
    user = get_user(user_id)
    if not user or not user.get("last_open"):
        return

    try:
        last_open = datetime.strptime(user["last_open"], "%Y-%m-%d %H:%M:%S")
    except ValueError:
        last_open = datetime.strptime(user["last_open"], "%Y-%m-%d")

    wait_time = TEST_WAIT_SECONDS if TEST_MODE else (last_open + timedelta(hours=24) - datetime.now()).total_seconds()

    if wait_time <= 0:
        try:
            await bot.send_message(
                user_id,
                "üéâ <b>–í–∞–º —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å —Å —Ä–æ–∑–æ–π!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start üî•",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
        return

    if user_id in scheduled_notifications:
        return

    async def notify_later():
        try:
            await asyncio.sleep(wait_time)
            await bot.send_message(
                user_id,
                "üéâ <b>–í–∞–º —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å —Å —Ä–æ–∑–æ–π!</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start üî•",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ {user_id}: {e}")
        finally:
            scheduled_notifications.pop(user_id, None)

    task = asyncio.create_task(notify_later())
    scheduled_notifications[user_id] = task

    if TEST_MODE:
        print(f"üß™ [TEST MODE] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_id} —á–µ—Ä–µ–∑ {TEST_WAIT_SECONDS} —Å–µ–∫.")
    else:
        print(f"‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {user_id} —á–µ—Ä–µ–∑ {wait_time / 3600:.2f} —á–∞—Å–æ–≤.")


async def restore_notifications(bot):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞"""
    data = load_db()
    valid_users = 0
    for user_id, user in data.items():
        if not str(user_id).isdigit():
            continue
        try:
            await schedule_notification(bot, int(user_id))
            valid_users += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
    mode_text = "üß™ –¢–µ—Å—Ç–æ–≤—ã–π" if TEST_MODE else "üöÄ –†–∞–±–æ—á–∏–π"
    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ({valid_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π). –†–µ–∂–∏–º: {mode_text}")


# =============================== #
#   –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞  #
# =============================== #
async def get_gifts(bot):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: gift_id -> gift object"""
    try:
        gifts_obj = await bot.get_available_gifts()
        gift_dict = {gift.id: gift for gift in gifts_obj.gifts}
        return gift_dict
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        return {}


async def send_gift_to_user(bot, user_id, gift_id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ gift_id"""
    try:
        success = await bot.send_gift(
            user_id=user_id,
            gift_id=gift_id,
            text=text,
            text_parse_mode="HTML"
        )
        return success
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        return False


# =============================== #
#           –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ           #
# =============================== #
@router.message(F.text == "/start")
async def start_menu(message: Message):
    """–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíé –ü–ª–∞—Ç–Ω—ã–µ –∫–µ–π—Å—ã üéÉ", callback_data="paid_cases"),
            InlineKeyboardButton(text="üöÄ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å üéÉ", callback_data="free_case")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å üéÉ", callback_data="profile")
        ]
    ])
    text = (
       "<b>üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Wayz Case!</b>\n\n"
        "<b>üéÉ –ê —Ç–∞–∫ –∂–µ –æ—Ç–∫—Ä—ã–≤–∞–π –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–µ–π—Å —Å NFT. Happy HallowenüéÉ !</b>\n\n"
        "üí´ –û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π –ø–æ–¥–∞—Ä–∫–∏.\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ üëá"
    )

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    try:
        photo = FSInputFile("assets/wayzban.png")  # –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        await message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–µ–π—Å–∞: {e}")
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

    

@router.callback_query(F.data == "free_case")
async def show_free_case(callback: CallbackQuery, bot):
    """Show notification free case"""
    user_id = callback.from_user.id
    username = callback.from_user.username
    data = load_db()
    settings = data.get("settings", {})

    channel = settings.get("required_channel")
    invite_link = settings.get("invite_link")

    user = get_user(user_id) or {}
    can_open = can_open_today(user)

    if not can_open:
        asyncio.create_task(schedule_notification(bot, user_id))

    # LINK FOR SUBS
    if not channel:
        subscribe_url = "https://t.me"
    elif channel.startswith("@"):
        subscribe_url = f"https://t.me/{channel.lstrip('@')}"
    else:
        subscribe_url = invite_link or "https://t.me"
        if not invite_link:
            print(f"‚ö†Ô∏è –î–ª—è –∫–∞–Ω–∞–ª–∞ {channel} –Ω–µ —É–∫–∞–∑–∞–Ω–∞ invite_link")

    # üîπ –ö–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=subscribe_url)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    # üîπ –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
    if can_open:
        status_text = "‚úÖ <b>–ö–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω!</b>\n–ù–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å üéÅ"
    else:
        hours, minutes = time_until_next(user)
        status_text = f"‚è≥ <b>–ö–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è: {hours} —á {minutes} –º–∏–Ω üîí"

    await callback.message.answer(
        f"üöÄ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å</b>\n\n"
        f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–±–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ Rocket \n\n"
        f"{status_text}\n\n"
        f"–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá",
        reply_markup=kb,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    user = get_user(callback.from_user.id) or {}
    username = callback.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    roses = user.get("roses", 0)
    cases_opened = user.get("cases_opened", 0)
    stars = user.get("stars", 0)

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n\n"
        f"ü™™ ID: <code>{callback.from_user.id}</code>\n"
        f"üìõ –ù–∏–∫–Ω–µ–π–º: @{username}\n\n"
        f"üöÄ –†–∞–∫–µ—Ç–æ–∫: <b>{roses}</b>\n"
        f"üì¶ –ö–µ–π—Å–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ: <b>{cases_opened}</b>\n"
        f"‚≠ê –ë–∞–ª–∞–Ω—Å: <b>{stars}</b> Stars"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)

  
# ===================== #
#       –ù–ê–ó–ê–î           #
# ===================== #
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await start_menu(callback.message)


# ===================== #
#   –ü–õ–ê–¢–ù–´–ï –ö–ï–ô–°–´       #
# ===================== #
@router.callback_query(F.data == "paid_cases")
async def show_paid_cases(callback: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÉ Dark Spell Case ‚Äî 25‚≠ê", callback_data="case_dark_spell")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await callback.message.answer("üíé –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å:", reply_markup=kb)

from aiogram.types import FSInputFile

from aiogram.types import FSInputFile, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

# ===================== #
#   DARK SPELL CASE     #
# ===================== #
@router.callback_query(F.data == "case_dark_spell")
async def case_dark_spell_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–µ–π—Å–∞ Dark Spell –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π"""
    user_id = callback.from_user.id

    # üîπ –û–ø–∏—Å–∞–Ω–∏–µ –∫–µ–π—Å–∞
    text = (
        "üéÉ <b>Dark Spell Case</b>\n\n"
        "üí´ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–∫—Ä—ã—Ç–∞ —Ä–µ–¥–∫–∞—è NFT –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑—ã!\n\n"
        "üìä <b>–®–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:</b>\n"
        "‚ùå ‚Äî 5%\n"
        "üß∏ ‚Äî 40%\n"
        "üåπ ‚Äî 30%\n"
        "üöÄ ‚Äî 15%\n"
        "ü™Ñ NFT: Witch Hat ‚Äî 10%\n\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è: <b>25‚≠ê</b>"
    )

    # üîπ –ö–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –û—Ç–∫—Ä—ã—Ç—å –∑–∞ 25‚≠ê", callback_data="buy_dark_spell")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="paid_cases")]
    ])

    # üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    try:
        photo = FSInputFile("assets/dark_spell_case.jpg")  # –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        await callback.message.answer_photo(
            photo=photo,
            caption=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–µ–π—Å–∞: {e}")
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

    await callback.answer()





# =============================== #
#   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ  #
# =============================== #
@router.callback_query(F.data == "check_sub")
async def check_sub_callback(callback, bot):
    user_id = callback.from_user.id
    username = callback.from_user.username
    subscribed = await check_subscription(bot, user_id)
    if not subscribed:
        await callback.answer("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω!", show_alert=True)
        return

    user = get_user(user_id) or {}
    if not can_open_today(user):
        hours, minutes = time_until_next(user)
        await callback.message.answer(
            f"üòÖ –¢—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è!\n–ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ {hours} —á {minutes} –º–∏–Ω üåû"
        )
        return

    await callback.message.answer("üéÅ <b>–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...</b>", parse_mode="HTML")
    await asyncio.sleep(2)
    await callback.message.answer("‚ú® <i>–í—ã –≤–∏–¥–∏—Ç–µ –±–ª–µ—Å–∫ –≤–Ω—É—Ç—Ä–∏...</i>", parse_mode="HTML")
    await asyncio.sleep(2)

    # –í—Ä–µ–º–µ–Ω–Ω–æ 100% —à–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    # –®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è 0.2%
    if random.randint(1,1000) == 1:
        new_roses = user.get("roses", 0) + 1
        update_user(user_id, username, roses=new_roses, last_open=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        await callback.message.answer(
            f"üöÄ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –¢–µ–±–µ –≤—ã–ø–∞–ª–∞ —Ä–∞–∫–µ—Ç–∫–∞!\n–í—Å–µ–≥–æ —Ä–∞–∫–µ—Ç–æ–∫: {new_roses}",
            parse_mode="HTML"
        )

        # –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ "–º–∏—à–∫–∏ –∑–∞ 15 –∑–≤–µ–∑–¥"
        gifts = await get_gifts(bot)
        teddy_gift = None
        for gift in gifts.values():
            emoji = getattr(getattr(gift, "sticker", None), "emoji", "")
            star_count = getattr(gift, "star_count", 0)
            if emoji == "üöÄ" and star_count == 50:
                teddy_gift = gift
                break

        if teddy_gift:
            sent = await send_gift_to_user(
                bot,
                user_id,
                gift_id=teddy_gift.id,
                text="üöÄ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç @wayzcase_bot"
            )
            if sent:
                await callback.message.answer("üöÄ –†–∞–∫–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
            else:
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫.")
        else:
            await callback.message.answer("‚ùå –ü–æ–¥–∞—Ä–æ–∫ —Ä–æ–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö.")

        user_link = f"@{username}" if username else f'<a href="tg://user?id={user_id}">–ü—Ä–æ—Ñ–∏–ª—å</a>'
        try:
            await bot.send_message(
                ADMIN_ID,
                f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} –≤—ã–±–∏–ª Rocket!\n"
                f"üÜî ID: <code>{user_id}</code>\n"
                f"üíê –í—Å–µ–≥–æ —Ä–æ–∑: <b>{new_roses}</b>",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    else:
        update_user(user_id, username, last_open=datetime.now().strftime("%Y-%m-%d %H:%M:%S"), increment_case=True)
        await callback.message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–æ–∑–∞ –Ω–µ –≤—ã–ø–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞ üí´")

    asyncio.create_task(schedule_notification(bot, user_id))

### BUY CASE SUKA
import random
import asyncio
from datetime import datetime
from aiogram.types import CallbackQuery, Message, LabeledPrice, SuccessfulPayment

# ====================== #
#  –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
# ====================== #


async def get_dark_gifts(bot):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: gift_id -> gift object"""
    try:
        gifts_obj = await bot.get_available_gifts()
        gift_dict = {gift.id: gift for gift in gifts_obj.gifts}
        return gift_dict
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤: {e}")
        return {}

async def send_giftdark_to_user(bot, user_id, gift_id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ gift_id"""
    try:
        return await bot.send_gift(
            user_id=user_id,
            gift_id=gift_id,
            text=text,
            text_parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        return False

# üîπ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–º–µ—Ç -> gift_id
AUTO_GIFTS = {
    "üß∏ –ú–∏—à–∫–∞": "5170233102089322756",
    "üåπ –†–æ–∑–∞": '5168103777563050263',
    "üöÄ –†–∞–∫–µ—Ç–∞": '5170564780938756245'
}

async def send_autodark_gift(bot, user_id, item_name):
    """–ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–∞ –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ –∏–∑ –∫–µ–π—Å–∞ —á–µ—Ä–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π gift_id"""
    if item_name not in AUTO_GIFTS:
        print(f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ {item_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–∞—á–∏")
        return False

    gift_id = AUTO_GIFTS[item_name]

    try:
        sent = await bot.send_gift(
            user_id=user_id,
            gift_id=gift_id,
            text=f"üéÅ –¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫: {item_name} –æ—Ç @rosecase_bot",
            text_parse_mode="HTML"
        )
        return sent
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ {item_name}: {e}")
        return False



# ====================== #
#  –†–∞–Ω–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞ –∫–µ–π—Å–∞
# ====================== #
def open_dark_spell_case():
    """–†–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ Dark Spell Case —Å —à–∞–Ω—Å–∞–º–∏"""
    items = {
        "‚ùå –ü—É—Å—Ç–æ": 55,
        "üß∏ –ú–∏—à–∫–∞": 30,
        "üåπ –†–æ–∑–∞": 12,
        "üöÄ –†–∞–∫–µ—Ç–∞": 2.99,
        "NFT ‚Äî Witch Hat": 0.01
    }
    roll = random.uniform(0, 100)
    cumulative = 0
    for item, chance in items.items():
        cumulative += chance
        if roll <= cumulative:
            return item
    return "‚ùå –ü—É—Å—Ç–æ"


# ====================== #
#  –ö–Ω–æ–ø–∫–∞ –∫—É–ø–∏—Ç—å –∫–µ–π—Å
# ====================== #
@router.callback_query(F.data == "buy_dark_spell")
async def buy_dark_spell_callback(callback: CallbackQuery, bot):
    user_id = callback.from_user.id
    amount = 25  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞

    invoice_payload = f"case_dark_spell_{user_id}_{int(datetime.now().timestamp())}"
    start_parameter = f"dark_spell_{user_id}_{int(datetime.now().timestamp())}"

    prices = [LabeledPrice(label=f"üéÉ Dark Spell Case ‚Äî {amount}‚≠ê", amount=amount)]

    try:
        await bot.send_invoice(
            chat_id=user_id,
            title="üéÉ Dark Spell Case",
            description="–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å —Å —à–∞–Ω—Å–æ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã!\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É–≤–∏–¥–∏—à—å –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è!",
            payload=invoice_payload,
            provider_token="<TOKEN>",  # —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            currency="XTR",
            prices=prices,
            start_parameter=start_parameter,
            # test_mode=True
        )
        await callback.answer("üí≥ –°—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {e}", show_alert=True)


# ====================== #
#  –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
# ====================== #
@router.message(F.successful_payment)
async def success_payment_handler(message: Message, bot):
    payment: SuccessfulPayment = message.successful_payment
    payload = payment.invoice_payload

    if not payload.startswith("case_dark_spell_"):
        return

    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    # üîπ –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    await message.answer("üéÅ <b>–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...</b>", parse_mode="HTML")
    await asyncio.sleep(2)
    await message.answer("‚ú® <i>–¢—ã –≤–∏–¥–∏—à—å –±–ª–µ—Å–∫ –≤–Ω—É—Ç—Ä–∏...</i>", parse_mode="HTML")
    await asyncio.sleep(2)

    # üîπ –†–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
    item = open_dark_spell_case()
    await message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª: {item}!")

    # üîπ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
    if item in AUTO_GIFTS:
        sent = await send_autodark_gift(bot, user_id, item)
        if sent:
            await message.answer(f"üéÅ {item} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –≤ –ø–æ–¥–∞—Ä–æ–∫!")
        else:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {item}.")

    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    # üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    db = load_db()  # –ø–æ–ª—É—á–∞–µ–º –≤—Å—é –±–∞–∑—É
    user = db["users"].get(str(user_id), {"username": username, "darkcases_opened": 0, "darkstars_spent": 0})

    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    darkcases_opened = user.get("darkcases_opened", 0) + 1
    darkstars_spent = user.get("darkstars_spent", 0) + 25

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    update_user(user_id, username, darkcases_opened=darkcases_opened, darkstars_spent=darkstars_spent)
  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    # üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(
            ADMIN_ID,
            f"üéÉ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ—Ç–∫—Ä—ã–ª Dark Spell Case –∏ –ø–æ–ª—É—á–∏–ª: {item}\n"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

@router.message(F.text.startswith("/refundStarPayment"))
async def refund_handler(message: Message, bot):
    """–í–æ–∑–≤—Ä–∞—Ç XTR-–ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    transaction_id = parts[1].strip()

    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,  # ID —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç
            telegram_payment_charge_id=transaction_id
        )
        await message.answer(f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ <code>{transaction_id}</code> –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")


from aiogram import Router, F
from aiogram.types import Message
from config import ADMIN_ID, ADMIN_2ID
from utils.db_manager import load_db
import asyncio

ADMINS = [ADMIN_ID, ADMIN_2ID]


@router.message(F.text == "/broadcast")
async def start_broadcast(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMINS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    await message.answer(
        "üì£ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å ‚Äî –æ–Ω–∞ —Ç–æ–∂–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
    )

    # –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ (–≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç)
    @router.message(F.from_user.id == message.from_user.id)
    async def get_content(msg: Message):
        db = load_db()
        users = db.get("users", {})

        sent, failed = 0, 0
        await msg.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")

        for user_id in list(users.keys()):
            try:
                if msg.photo:
                    # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ
                    await msg.bot.send_photo(
                        chat_id=int(user_id),
                        photo=msg.photo[-1].file_id,
                        caption=msg.caption or "üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏",
                    )
                else:
                    # –ï—Å–ª–∏ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await msg.bot.send_message(
                        chat_id=int(user_id),
                        text=msg.text or "üì¢ –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    )
                sent += 1
                await asyncio.sleep(0.05)  # –∞–Ω—Ç–∏—Å–ø–∞–º-–ø–∞—É–∑–∞
            except Exception:
                failed += 1
                continue

        await msg.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üì¨ –£—Å–ø–µ—à–Ω–æ: <b>{sent}</b>\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: <b>{failed}</b>",
            parse_mode="HTML"
        )

        # —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        router.message.handlers.pop()


