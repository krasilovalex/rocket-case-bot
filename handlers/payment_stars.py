from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LabeledPrice,
    PreCheckoutQuery,
    SuccessfulPayment
)
from config import ADMIN_ID
from utils.db_manager import load_bot_balance, update_bot_balance  # —Å–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞

ADMINS = [ADMIN_ID]

router = Router()

# =============================== #
#       –ö–æ–º–∞–Ω–¥–∞ /payment_stars    #
# =============================== #
@router.message(F.text == "/payment_stars")
async def payment_stars_handler(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ 25 ‚≠êÔ∏è", callback_data="topup_25")],
        [InlineKeyboardButton(text="üí∞ 50 ‚≠êÔ∏è", callback_data="topup_50")],
        [InlineKeyboardButton(text="üí∞ 500 ‚≠êÔ∏è", callback_data="topup_500")],
        [InlineKeyboardButton(text="üí∞ 1000 ‚≠êÔ∏è", callback_data="topup_1000")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞:", reply_markup=kb)


# =============================== #
#       –í—ã–±–æ—Ä —Å—É–º–º—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
# =============================== #
@router.callback_query(F.data.startswith("topup_"))
async def topup_callback(callback, bot):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!", show_alert=True)
        return

    amount = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
    invoice_payload = f"bot_balance_{amount}"
    start_parameter = f"bot_xtr_topup_{amount}"

    prices = [LabeledPrice(label=f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {amount} ‚≠êÔ∏è", amount=amount)]

    try:
        await bot.send_invoice(
            chat_id=callback.from_user.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞",
            description=f"–î–æ–±–∞–≤–ª—è–µ—Ç {amount} ‚≠êÔ∏è –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.",
            payload=invoice_payload,
            provider_token="",  # —Ç–æ–∫–µ–Ω XTR –∏–ª–∏ test_mode —Ç–æ–∫–µ–Ω
            currency="XTR",
            prices=prices,
            start_parameter=start_parameter,
            # test_mode=True  # –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
        )
        await callback.answer("üí≥ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω!", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}", show_alert=True)


# =============================== #
#       PreCheckout Handler       #
# =============================== #
@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º pre_checkout
    await pre_checkout_query.answer(ok=True)


# =============================== #
#       Successful Payment Handler
# =============================== #
@router.message(F.successful_payment)
async def success_payment_handler(message: Message):
    payment: SuccessfulPayment = message.successful_payment
    payload = payment.invoice_payload  # payload –∏–∑ send_invoice

    if payload.startswith("bot_balance_"):
        try:
            amount = int(payload.split("_")[2])
        except Exception:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
        current_balance = load_bot_balance()
        new_balance = current_balance + amount
        update_bot_balance(new_balance)

        # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} ‚≠êÔ∏è!\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} ‚≠êÔ∏è."
        )

        try:
            await message.bot.send_message(
                ADMIN_ID,
                f"üí≥ –ê–¥–º–∏–Ω {message.from_user.full_name} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –Ω–∞ {amount} ‚≠êÔ∏è.\n"
                f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {new_balance} ‚≠êÔ∏è."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
